// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreatePost = `-- name: CreatePost :one
INSERT INTO posts (user_id, title, content, published, category, tags)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, title, content, published, category, tags, created_at, updated_at
`

type CreatePostParams struct {
	UserID    int32       `db:"user_id" json:"user_id"`
	Title     string      `db:"title" json:"title"`
	Content   pgtype.Text `db:"content" json:"content"`
	Published pgtype.Bool `db:"published" json:"published"`
	Category  pgtype.Text `db:"category" json:"category"`
	Tags      []string    `db:"tags" json:"tags"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, CreatePost,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Published,
		arg.Category,
		arg.Tags,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Published,
		&i.Category,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (name, email, age, status, role, country, verified)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, email, age, status, role, country, verified, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Name     string      `db:"name" json:"name"`
	Email    string      `db:"email" json:"email"`
	Age      pgtype.Int4 `db:"age" json:"age"`
	Status   pgtype.Text `db:"status" json:"status"`
	Role     pgtype.Text `db:"role" json:"role"`
	Country  pgtype.Text `db:"country" json:"country"`
	Verified pgtype.Bool `db:"verified" json:"verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.Name,
		arg.Email,
		arg.Age,
		arg.Status,
		arg.Role,
		arg.Country,
		arg.Verified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
		&i.Status,
		&i.Role,
		&i.Country,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const DeletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeletePost, id)
	return err
}

const DeleteUser = `-- name: DeleteUser :exec
UPDATE users SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteUser, id)
	return err
}

const GetPost = `-- name: GetPost :one
SELECT id, user_id, title, content, published, category, tags, created_at, updated_at
FROM posts
WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRow(ctx, GetPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Published,
		&i.Category,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUser = `-- name: GetUser :one
SELECT id, name, email, age, status, role, country, verified, created_at, updated_at, deleted_at
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, GetUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
		&i.Status,
		&i.Role,
		&i.Country,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, age, status, role, country, verified, created_at, updated_at, deleted_at
FROM users
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
		&i.Status,
		&i.Role,
		&i.Country,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const ListPosts = `-- name: ListPosts :many
SELECT id, user_id, title, content, published, category, tags, created_at, updated_at
FROM posts
ORDER BY created_at DESC
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, ListPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Published,
			&i.Category,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPostsByUser = `-- name: ListPostsByUser :many
SELECT id, user_id, title, content, published, category, tags, created_at, updated_at
FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListPostsByUser(ctx context.Context, userID int32) ([]Post, error) {
	rows, err := q.db.Query(ctx, ListPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Published,
			&i.Category,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUsers = `-- name: ListUsers :many
SELECT id, name, email, age, status, role, country, verified, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Age,
			&i.Status,
			&i.Role,
			&i.Country,
			&i.Verified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUsersByStatus = `-- name: ListUsersByStatus :many
SELECT id, name, email, age, status, role, country, verified, created_at, updated_at, deleted_at
FROM users
WHERE status = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListUsersByStatus(ctx context.Context, status pgtype.Text) ([]User, error) {
	rows, err := q.db.Query(ctx, ListUsersByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Age,
			&i.Status,
			&i.Role,
			&i.Country,
			&i.Verified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchUsers = `-- name: SearchUsers :many
SELECT id, name, email, age, status, role, country, verified, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NULL /* sqld:where */
ORDER BY created_at DESC, id DESC /* sqld:cursor */ /* sqld:limit */
`

func (q *Queries) SearchUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, SearchUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Age,
			&i.Status,
			&i.Role,
			&i.Country,
			&i.Verified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchUsersByStatus = `-- name: SearchUsersByStatus :many
SELECT id, name, email, age, status, role, country, verified, created_at, updated_at, deleted_at
FROM users
WHERE status = $1 AND deleted_at IS NULL /* sqld:where */
ORDER BY created_at DESC, id DESC /* sqld:cursor */ /* sqld:limit */
`

func (q *Queries) SearchUsersByStatus(ctx context.Context, status pgtype.Text) ([]User, error) {
	rows, err := q.db.Query(ctx, SearchUsersByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Age,
			&i.Status,
			&i.Role,
			&i.Country,
			&i.Verified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = $2, content = $3, published = $4, category = $5, tags = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, content, published, category, tags, created_at, updated_at
`

type UpdatePostParams struct {
	ID        int32       `db:"id" json:"id"`
	Title     string      `db:"title" json:"title"`
	Content   pgtype.Text `db:"content" json:"content"`
	Published pgtype.Bool `db:"published" json:"published"`
	Category  pgtype.Text `db:"category" json:"category"`
	Tags      []string    `db:"tags" json:"tags"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, UpdatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Published,
		arg.Category,
		arg.Tags,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Published,
		&i.Category,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2, email = $3, age = $4, status = $5, role = $6, country = $7, verified = $8, updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, email, age, status, role, country, verified, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID       int32       `db:"id" json:"id"`
	Name     string      `db:"name" json:"name"`
	Email    string      `db:"email" json:"email"`
	Age      pgtype.Int4 `db:"age" json:"age"`
	Status   pgtype.Text `db:"status" json:"status"`
	Role     pgtype.Text `db:"role" json:"role"`
	Country  pgtype.Text `db:"country" json:"country"`
	Verified pgtype.Bool `db:"verified" json:"verified"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, UpdateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Age,
		arg.Status,
		arg.Role,
		arg.Country,
		arg.Verified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
		&i.Status,
		&i.Role,
		&i.Country,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
